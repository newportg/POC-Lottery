@page "/drawselection"

@using Lottery.Data
@inject IThunderBallService ThunderBallService

<h1>ThunderBall Draw Selection</h1>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Draw Number</th>
                <th>Ball1</th>
                <th>Ball2</th>
                <th>Ball3</th>
                <th>Ball4</th>
                <th>Ball5</th>
                <th>Thunderball</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var draw in tickets)
            {
                <tr>
                    <td>@draw.DrawNumber</td>
                    <td>@draw.Balls[0]</td>
                    <td>@draw.Balls[1]</td>
                    <td>@draw.Balls[2]</td>
                    <td>@draw.Balls[3]</td>
                    <td>@draw.Balls[4]</td>
                    <td>@draw.ThunderBall</td>
                    <td>@draw.DrawTotal</td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="SaveGuesses">Save Guesses</button>

    @((MarkupString)hotBalls)
    @((MarkupString)hotBallsLinear)
    @((MarkupString)deltas)

    @((MarkupString)drawTotals)

    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in hot)
            {
                <tr>
                    <td>@item.Key</td>
                    <td>@item.Value</td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    List<Ticket> tickets = new List<Ticket>();
    List<KeyValuePair<int, int>> hot = new List<KeyValuePair<int, int>>();
    IList<Lottery> items = new List<Lottery>();

    private bool IsSortedAscending;
    private string CurrentSortColumn;
    string hotBalls;
    string hotBallsLinear;
    string drawTotals;
    string deltas;

    protected override async Task OnInitializedAsync()
    {
        hotBalls = HotBalls( await ThunderBallService.GetHotBallsAsync());
        hotBallsLinear = HotBallsLinear(await ThunderBallService.GetHotBallsAsync());
        drawTotals = DrawTotals(await ThunderBallService.GetDrawTotalsAsync());
        deltas = Deltas(await ThunderBallService.GetDeltasAsync());

        // Draw selection should be :-
        // 1, Not have consecutive numbers
        // 2, Not have cold numbers
        // 2, Not been drawn before
        // 3, Total should be within the middle of the Total distribution
        tickets = await ThunderBallService.GetTicketsAsync();
    }

    private void SaveGuesses()
    {
        ThunderBallService.SaveGuesses(tickets);
    }

    public string HotBalls(List<HotBalls> hb)
    {
        string hotBalls;
        var dic = hb[hb.Count - 1].Balls;

        hot = dic.OrderBy(x => x.Key).ToList();

        // Whats the lowest hot value
        // Whats the highest hit value
        var val = dic.OrderBy(x => x.Value).ToList();
        var low = val[0].Value;
        var high = val[val.Count - 1].Value;

        hotBalls = "<table class='table-bordered'><tbody>";
        for (int i = 0, j = 0; i < 39 && j < 5; i++, j++)
        {
            if (j == 0)
                hotBalls += "<tr>";

            hotBalls += $"<td bgcolor=#ff{MapNumberToRange(hot[i].Value, low, high, 0, 255)}00>{(hot[i].Key)}</td>";
            if (j == 4)
            {
                hotBalls += "</tr>";
                j = -1;
            }
        }
        hotBalls += "</tr></tbody></table>";

        return hotBalls;
    }

    public string HotBallsLinear(List<HotBalls> hb)
    {
        string hotBalls;
        var dic = hb[hb.Count - 1].Balls;

        hot = dic.OrderBy(x => x.Key).ToList();

        // Whats the lowest hot value
        // Whats the highest hit value
        var val = dic.OrderBy(x => x.Value).ToList();
        var low = val[0].Value;
        var high = val[val.Count - 1].Value;

        hotBalls = "<table class='table-bordered'><tbody><tr>";
        foreach (var item in val)
        {
            hotBalls += $"<td bgcolor=#ff{MapNumberToRange(item.Value, low, high, 0, 255)}00>{(item.Key)}</td>";
        }
        hotBalls += "</tr></tbody></table>";

        return hotBalls;
    }

    public string DrawTotals(Dictionary<int, int> dic)
    {
        string drawTotals;

        var ord = dic.OrderBy(x => x.Key).ToList();
        var middle = ord.Count() / 5;

        drawTotals = "<table class='table-bordered'><thead><tr><td colspan=2>Draw Totals</td></tr><tr><td>Count</td><td>Totals</td></tr></thead><tbody>";

        foreach (var entry in ord)
        {
            int count = entry.Value;
            int number = entry.Key;
            string distribution = new string('*', count);

            var idx = ord.IndexOf(entry);
            if (idx > middle && idx < middle * 4)
                drawTotals += $"<tr bgcolor=#00ff00><td>{number}</td><td>{distribution}</td></tr>";
            else
                drawTotals += $"<tr><td>{number}</td><td>{distribution}</td></tr>";
        }
        drawTotals += "</tbody></table>";
        return drawTotals;

    }

    public string Deltas(Dictionary<int, int> dic)
    {
        string deltas;
        var ord = dic.OrderBy(x => x.Key).ToList();
        var totalcount = 0;
        foreach (var entry in ord)
        {
            totalcount += entry.Value;
        }

        deltas = "<table class='table-bordered'><thead><tr><td colspan=3>Delta</td></tr><tr><td>Count</td><td>Percent</td><td>Totals</td></tr></thead><tbody>";


        foreach (var entry in ord)
        {
            int count = entry.Value;
            int number = entry.Key;
            decimal percentage = (decimal)Math.Round((double)(100 * count) / totalcount);

            string distribution = new string('*', count);

            deltas += $"<tr><td>{number}</td><td>{percentage}</td><td>{distribution}</td></tr>";
        }

        deltas += "</tbody></table>";
        return deltas;
    }

    private string MapNumberToRange(int number, int inputMin, int inputMax, int outputMin, int outputMax)
    {
        // Ensure the number is within the input range
        number = Math.Max(inputMin, Math.Min(inputMax, number));

        // Calculate the size of the input and output ranges
        int inputRangeSize = inputMax - inputMin;
        int outputRangeSize = outputMax - outputMin;

        // Calculate the gap ratio between the input and output ranges
        double gapRatio = (double)outputRangeSize / inputRangeSize;

        // Calculate the mapped value
        //byte mappedValue = (byte)((number - inputMin) * gapRatio + outputMin);
        byte mappedValue = (byte)((inputMax - number) * gapRatio + outputMin);

        string hexValue = mappedValue.ToString("X2");

        return hexValue;
    }

    private string GetSortStyle(string columnName)
    {
        if (CurrentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (IsSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void SortTable(string columnName)
    {
        //Sorting against a column that is not currently sorted against.
        if (columnName != CurrentSortColumn)
        {
            //We need to force order by ascending on the new column
            //This line uses reflection and will probably perform inefficiently in a production environment.
            tickets = tickets.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            CurrentSortColumn = columnName;
            IsSortedAscending = true;

        }
        else //Sorting against same column but in different direction
        {
            if (IsSortedAscending)
            {
                tickets = tickets.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                tickets = tickets.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            //Toggle this boolean
            IsSortedAscending = !IsSortedAscending;
        }
    }
}


